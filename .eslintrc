{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:eslint-comments/recommended",
    "plugin:jsonc/recommended-with-jsonc"],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["unicorn","@typescript-eslint"],
  "settings": {
    "import/resolver": {
      "node": { "extensions": [".js", ".mjs", ".ts", ".d.ts"] },
      "typescript": {} // this loads <rootdir>/tsconfig.json to eslint
    }
  },
  "overrides": [
    {
      "files": ["*.json", "*.json5"],
      "parser": "jsonc-eslint-parser",
      "rules": {
        "quotes": ["error", "double"],
        "quote-props": ["error", "always"],
        "comma-dangle": ["error", "never"]
      }
    },
    {
      "files" : ["package.json"],
      "rules": {
        "import/no-extraneous-dependencies": ["error", {"devDependencies": true}]
      }
    }
  ],
  "ignorePatterns": [
    "*.min.*",
    "CHANGELOG.md",
    "dist",
    "LICENSE*",
    "output",
    "coverage",
    "public",
    "temp",
    "packages-lock.json",
    "pnpm-lock.yaml",
    "yarn.lock",
    "__snapshots__",
    "!.github",
    "!.vitepress",
    "!.vscode",
    "_scratch"
  ],
  "rules": {
    "import/named": "off",
    // "comma-dangle" : ["error", ""],
    // "@typescript-eslint/explicit-function-return-type": "off",
    // "@typescript-eslint/no-explicit-any": 0,
    // "@typescript-eslint/no-inferrable-types": [
    //   "warn", {
    //     "ignoreParameters": true
    //   }
    // ],

    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/semi": ["error", "never"],
    "@typescript-eslint/ban-ts-comment": ["error", { "ts-ignore": "allow-with-description" }],
    "@typescript-eslint/member-delimiter-style": ["error", { "multiline": { "delimiter": "none" } }],
    "@typescript-eslint/type-annotation-spacing": ["error", {}],
    "@typescript-eslint/consistent-type-imports": ["error", { "prefer": "type-imports", "disallowTypeAnnotations": false }],
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/consistent-indexed-object-style": "off",
    "@typescript-eslint/prefer-ts-expect-error": "error",
    "@typescript-eslint/no-unused-vars": "warn", //TODO: fix
    // "@typescript-eslint/naming-convention": ["error", {
    //   "selector": "variable",
    //   "format": ["camelCase", "PascalCase"],
    //   "leadingUnderscore": "allow",
    //   "trailingUnderscore": "forbid"
    // }],

    //off
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/ban-ts-ignore": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/ban-types": "off",
    "@typescript-eslint/no-namespace": "off",

    //common
    // "prettier/prettier": ["error", 
    //   {
    //     "singleQuote": true,
    //     "semi": false,
    //     "trailingComma": "all",
    //     "max-empty-lines": 1
    //     }
    //   ],
    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 0 }],
    "semi": ["error", "never"],
    "curly": ["error", "multi-or-nest", "consistent"],
    "quotes": ["error", "single"],
    "quote-props": ["error", "consistent-as-needed"],
    "array-bracket-spacing": ["error", "never"],
    "brace-style": ["error", "stroustrup", { "allowSingleLine": true }],
    "block-spacing": ["error", "always"],
    "camelcase": "off",
    "comma-spacing": ["error", { "before": false, "after": true }],
    "comma-style": ["error", "last"],
    "comma-dangle": ["error", "always-multiline"],
    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
    "@typescript-eslint/indent": ["error", 2, { "SwitchCase": 1, "VariableDeclarator": 1, "outerIIFEBody": 1 }],
    "object-curly-spacing": ["error", "always"],
    "no-return-await": "off",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "error",
    "arrow-parens": ["error", "as-needed", { "requireForBlockBody": true }],
    "spaced-comment": ["error", "always", {
      "line": {
        "markers": ["/"],
        "exceptions": ["/", "#"]
      },
      "block": {
        "markers": ["!"],
        "exceptions": ["*"],
        "balanced": true
      }
    }],
    // best-practice
    "no-console": ["error"],
    "array-callback-return": "error",
    "block-scoped-var": "error",
    "consistent-return": "off",
    "complexity": ["off", 11],
    "eqeqeq": ["error", "smart"],
    "no-alert": "warn",
    "no-case-declarations": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-with": "error",
    "no-void": "error",
    "no-useless-escape": "off",
    "vars-on-top": "error",
    "require-await": "off",
    "no-return-assign": "off",
    "operator-linebreak": ["error", "after"],

    // unicorns
    // Pass error message when throwing errors
    "unicorn/error-message": "error",
    // Uppercase regex escapes
    "unicorn/escape-case": "error",
    // Array.isArray instead of instanceof
    "unicorn/no-array-instanceof": "error",
    // Prevent deprecated `new Buffer()`
    "unicorn/no-new-buffer": "error",
    // Keep regex literals safe!
    "unicorn/no-unsafe-regex": "off",
    // Lowercase number formatting for octal, hex, binary (0x1"error" instead of 0X1"error")
    "unicorn/number-literal-case": "error",
    // ** instead of Math.pow()
    "unicorn/prefer-exponentiation-operator": "error",
    // includes over indexOf when checking for existence
    "unicorn/prefer-includes": "error",
    // String methods startsWith/endsWith instead of more complicated stuff
    "unicorn/prefer-starts-ends-with": "error",
    // textContent instead of innerText
    "unicorn/prefer-text-content": "error",
    // Enforce throwing type error when throwing error while checking typeof
    "unicorn/prefer-type-error": "error",
    // Use new when throwing error
    "unicorn/throw-new-error": "error",

    "no-use-before-define": ["error", { "functions": false, "classes": false, "variables": true }],
    "eslint-comments/disable-enable-pair": "off",
    "import/no-named-as-default-member": "off",
    "n/no-callback-literal": "off",

    "sort-imports": [
      "error",
      {
        "ignoreCase": false,
        "ignoreDeclarationSort": true,
        "ignoreMemberSort": false,
        "memberSyntaxSortOrder": ["none", "all", "multiple", "single"],
        "allowSeparatedGroups": false
      }
    ]
  }
}
